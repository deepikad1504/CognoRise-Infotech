def print_grid(grid):
    for row in grid:
        print(" ".join(map(str, row)))


def is_safe(grid, row, col, num):
   
    return (
        all(num != grid[row][i] for i in range(9))
        and all(num != grid[i][col] for i in range(9))
        and all(num != grid[row // 3 * 3 + i // 3][col // 3 * 3 + i % 3] for i in range(9))
    )


def find_unassigned_location(grid):
    for i in range(9):
        for j in range(9):
            if grid[i][j] == 0:
                return i, j
    return -1, -1  


def solve_sudoku(grid):
    row, col = find_unassigned_location(grid)

   
    if row == -1 and col == -1:
        return True

   
    for num in range(1, 10):
        if is_safe(grid, row, col, num):
           
            grid[row][col] = num

           
            if solve_sudoku(grid):
                return True

           
            grid[row][col] = 0

   
    return False



sudoku_grid = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

if solve_sudoku(sudoku_grid):
    print("Sudoku solution:")
    print_grid(sudoku_grid)
else:
    print("No solution exists.")
